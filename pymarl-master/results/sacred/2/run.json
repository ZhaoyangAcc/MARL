{
  "artifacts": [],
  "command": "my_main",
  "experiment": {
    "base_dir": "D:\\study\\code\\multi_agent\\QPLEX-master\\pymarl-master\\src",
    "dependencies": [
      "munch==2.5.0",
      "numpy==1.18.4",
      "sacred==0.8.1",
      "torch==1.5.0"
    ],
    "mainfile": "main.py",
    "name": "pymarl",
    "repositories": [],
    "sources": [
      [
        "main.py",
        "_sources\\main_63d7d00072f4e5be0310acb11aa60581.py"
      ],
      [
        "run.py",
        "_sources\\run_9e47dec8e4b399ae9271c81cf6014601.py"
      ],
      [
        "utils\\logging.py",
        "_sources\\logging_aa14e56e60b01dd7a9ddb8e6cdf36b85.py"
      ]
    ]
  },
  "fail_trace": [
    "Traceback (most recent call last):\n",
    "  File \"C:\\Users\\puyuan\\Anaconda3\\envs\\venv-py3.6\\lib\\site-packages\\sacred\\config\\captured_function.py\", line 42, in captured_function\n    result = wrapped(*args, **kwargs)\n",
    "  File \"D:/study/code/multi_agent/QPLEX-master/pymarl-master/src/main.py\", line 35, in my_main\n    run(_run, config, _log)\n",
    "  File \"D:\\study\\code\\multi_agent\\QPLEX-master\\pymarl-master\\src\\run.py\", line 51, in run\n    run_sequential(args=args, logger=logger)\n",
    "  File \"D:\\study\\code\\multi_agent\\QPLEX-master\\pymarl-master\\src\\run.py\", line 235, in run_sequential\n    learner.train(episode_sample, runner.t_env, episode)\n",
    "  File \"D:\\study\\code\\multi_agent\\QPLEX-master\\pymarl-master\\src\\learners\\dmaq_qatten_learner.py\", line 191, in train\n    show_demo=show_demo, save_data=save_data)\n",
    "  File \"D:\\study\\code\\multi_agent\\QPLEX-master\\pymarl-master\\src\\learners\\dmaq_qatten_learner.py\", line 99, in sub_train\n    cur_max_actions_onehot = th.zeros(cur_max_actions.squeeze(3).shape + (self.n_actions,)).cuda()\n",
    "  File \"C:\\Users\\puyuan\\Anaconda3\\envs\\venv-py3.6\\lib\\site-packages\\torch\\cuda\\__init__.py\", line 149, in _lazy_init\n    _check_driver()\n",
    "  File \"C:\\Users\\puyuan\\Anaconda3\\envs\\venv-py3.6\\lib\\site-packages\\torch\\cuda\\__init__.py\", line 47, in _check_driver\n    raise AssertionError(\"Torch not compiled with CUDA enabled\")\n",
    "AssertionError: Torch not compiled with CUDA enabled\n"
  ],
  "heartbeat": "2020-12-07T13:04:44.666840",
  "host": {
    "ENV": {},
    "cpu": "Unknown",
    "hostname": "LAPTOP-Lenovo",
    "os": [
      "Windows",
      "Windows-10-10.0.18362-SP0"
    ],
    "python_version": "3.6.10"
  },
  "meta": {
    "command": "my_main",
    "options": {
      "--beat-interval": null,
      "--capture": null,
      "--comment": null,
      "--debug": false,
      "--enforce_clean": false,
      "--file_storage": null,
      "--force": false,
      "--help": false,
      "--loglevel": null,
      "--mongo_db": null,
      "--name": null,
      "--pdb": false,
      "--print-config": false,
      "--priority": null,
      "--queue": false,
      "--s3": null,
      "--sql": null,
      "--tiny_db": null,
      "--unobserved": false,
      "COMMAND": null,
      "UPDATE": [
        "local_results_path='../../../tmp_DD/sc2_bane_vs_bane/results/'",
        "save_model=True",
        "use_tensorboard=True",
        "save_model_interval=200000",
        "t_max=210000",
        "epsilon_finish=1.0",
        "use_cuda=False"
      ],
      "help": false,
      "with": true
    }
  },
  "resources": [],
  "result": null,
  "start_time": "2020-12-07T13:04:42.161542",
  "status": "FAILED",
  "stop_time": "2020-12-07T13:04:44.669832"
}